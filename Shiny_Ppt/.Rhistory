rexp(n, lambda)
rexp(10, 0.2)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
rexp(40, 0.2)
rexp(40, 0.2)
hist(rexp(40, 0.2) )
hist(rexp(40, 0.2) )
hist(rexp(40, 0.2) )
hist(rexp(40, 0.2) )
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(hist(rexp(40, 0.2) )))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
SampleMean=mean(mns)
SampleMean
set.seed(820)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
SampleMean=mean(mns)
SampleMean
set.seed(1)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
SampleMean=mean(mns)
SampleMean
TheorecticalMean=1/lambda
TheorecticalMean
TheorecticalMean=1/lambda
set.seed(1)
lambda = 0.2
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, lambda)))
SampleMean=mean(mns)
SampleMean
TheorecticalMean=1/lambda
TheorecticalMean
sd = sd(mns)
set.seed(1)
lambda = 0.2
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, lambda)))
sd = sd(mns)
variance = var(mns)
SampleVariance = var(mns)
SampleVariance = var(mns)
SampleVariance
ExpectedVariance = ((1/Lambda)/sqrt(40))^2
ExpectedVariance
ExpectedVariance = ((1/Lambda)/sqrt(40))^2
ExpectedVariance = ((1/lambda)/sqrt(40))^2
SampleVariance = var(mns)
SampleVariance
ExpectedVariance = ((1/lambda)/sqrt(40))^2
ExpectedVariance
library(ggplot2)
ggplot(data = Means, aes(x = x)) + geom_histogram(aes(y = ..density..),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd =1/0.2))
library(ggplot2)
ggplot(data = mns, aes(x = x)) + geom_histogram(aes(y = ..density..),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd =1/0.2))
library(dplyr)
data_df<-tbl_df(mns)
data_df<-tbl_df(data.frame(mns))
library(ggplot2)
ggplot(data = data_df, aes(x = x)) + geom_histogram(aes(y = ..density..),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd =1/0.2))
library(ggplot2)
ggplot(data = data_df,  + geom_histogram(aes(y = ..density..),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd =1/0.2))
)
ggplot(data = data_df) + geom_histogram(aes(y = ..density..),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd =1/0.2))
data_df
library(ggplot2)
ggplot(data = data_df, aes(x = mns)) + geom_histogram(aes(y = ..density..),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd =1/0.2))
ggplot(data = data_df, aes(x = mns)) + geom_histogram(aes(y = ..density..),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd = 1/0.2/sqrt(40)))
library(ggplot2)
ggplot(data = data_df, aes(x = mns)) + geom_histogram(aes(y = ..density..), fill = I("blue"),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd = 1/0.2/sqrt(40)))
1/0.2/sqrt(40)
qqnorm(mns)
qqline(mns, col = 2)
library(datasets)
data(ToothGrowth)
str(ToothGrowth)
ToothGrowth$dose <- as.factor(ToothGrowth$dose) # convert to factor
summary(ToothGrowth)
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))
geom_boxplot(aes(fill = factor(dose)))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))
ggplot(aes(x = factor(dose), y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = factor(dose)))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))
dose12 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
dose13 <- subset(ToothGrowth, dose %in% c(0.5, 2.0))
dose23 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
t.test(len ~ dose, paired = F, var.equal = F, data = Tooth.dose12)
dose12 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
dose13 <- subset(ToothGrowth, dose %in% c(0.5, 2.0))
dose23 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
t.test(len ~ dose, paired = F, var.equal = F, data = Tooth.dose12)
t.test(len ~ dose, paired = F, var.equal = F, data = dose12)
dose05 <- subset(ToothGrowth, dose == 0.5)
dose10 <- subset(ToothGrowth, dose == 1.0)
dose20 <- subset(ToothGrowth, dose == 2.0)
t.test(len ~ supp, paired = F, var.equal = F, data = dose05)
find.package("RCurl")
.libPaths( "")
setwd("D:./././JS/Slidify/Shiny_Ppt/")
library(slidify)
library(Slidify)
library(slidify)
publish(title = 'Slidify_PPT', 'index.html', host = 'rpubs')
install.packages("devtools")
library(devtools)
publish
?publish
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv\slidifyLibraries')
install_github('slidify','ramnathv/slidify')
install_github('slidify','ramnathv/slidify/slidify')
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
publish
publish(title = 'Slidify_PPT', 'index.html', host = 'rpubs')
library(RCurl)
publish(title = 'Slidify_PPT', 'index.html', host = 'rpubs')
find.package("RCurl")
.libPaths
?.libPaths
.libPaths("C:/Users/USER/Documents/R/win-library/3.1/RCurl")
publish(title = 'Slidify_PPT', 'index.html', host = 'rpubs')
publish(title = 'SlidifyPPT', 'index.html', host = 'rpubs')
publish(title = 'SlidifyPPT','index.html', host = 'rpubs')
RCurl
library(RCurl)
publish(title = 'SlidifyPPT','index.html', host = 'rpubs')
publish(title = 'SlidifyPPT','index.html', host = 'rpubs')
